# Define the name of the pipeline and the order of its stages
stages:
  - build_automation
  - valid_user_login
  - Student_Book_theClass
  - Student_SignUp
  - Teacher_SignUp
  
 

# Define the job for building the Docker image in the admin development environment
build_automation:
  stage: build_automation
  tags:
    - whaot_automation
  image: 
    name: docker:20.10.7
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_REGISTRY: 375366083547.dkr.ecr.ap-south-1.amazonaws.com
    APP_NAME: whaot_automation
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws --version
    - docker info
    - docker --version
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/$APP_NAME .
    - docker push $DOCKER_REGISTRY/$APP_NAME

  only:
    - element-locator-change

# Define the job for testing the Docker image in the admin development environment
valid_user_login:
  stage: valid_user_login
  allow_failure: true
 
  tags:
    - whaot_automation
  image: 
    name: docker:20.10.7
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
     MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
     DOCKER_HOST: tcp://docker:2375
     DOCKER_DRIVER: overlay2
     DOCKER_TLS_CERTDIR: ""
     DOCKER_REGISTRY: 375366083547.dkr.ecr.ap-south-1.amazonaws.com
     APP_NAME: whaot_automation
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    # - sudo apt-get update
    # - sudo apt-get install apt
    - curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose


# Run the tests  
  script:

      - mkdir -p report/valid_user_login
      - docker run -d -v /builds/gipo-new/whaot-automation/report/valid_user_login:/home/gopal/git/whaot-automation/test-output --name=$APP_NAME $DOCKER_REGISTRY/$APP_NAME mvn -f pom.xml  test -PrunBDDTests "-Dcucumber.filter.tags=@validuserlogin" 
      - docker logs -f $APP_NAME 
      - docker rm -f $(docker ps -aq) 

# Store artifacts: Report

  artifacts: 
   paths: 
   - report/valid_user_login/


   when: always
   expire_in: 1h

  only: 
     - element-locator-change   

# Define the job for testing the Docker image in the admin development environment
Student_Book_theClass:
  stage: Student_Book_theClass
  allow_failure: true
 
  tags:
    - whaot_automation
  image: 
    name: docker:20.10.7
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
     MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
     DOCKER_HOST: tcp://docker:2375
     DOCKER_DRIVER: overlay2
     DOCKER_TLS_CERTDIR: ""
     DOCKER_REGISTRY: 375366083547.dkr.ecr.ap-south-1.amazonaws.com
     APP_NAME: whaot_automation
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    # - sudo apt-get update
    # - sudo apt-get install apt
    - curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose


# Run the tests  
  script:

      - mkdir -p report/Student_Book_theClass
      - docker run -d -v /builds/gipo-new/whaot-automation/report/Student_Book_theClass:/home/gopal/git/whaot-automation/test-output --name=$APP_NAME $DOCKER_REGISTRY/$APP_NAME mvn -f pom.xml clean  test -PrunBDDTests "-Dcucumber.filter.tags=@Student_class_book" 
      - docker logs -f $APP_NAME 
      - docker rm -f $(docker ps -aq)   


      
# Store artifacts: Report

  artifacts: 
   paths: 
   - report/Student_Book_theClass/


   when: always
   expire_in: 1h

  only: 
     - element-locator-change 


     # Define the job for testing the Docker image in the admin development environment
Student_Signup:
  stage: Student_SignUp
  allow_failure: true
 
  tags:
    - whaot_automation
  image: 
    name: docker:20.10.7
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
     MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
     DOCKER_HOST: tcp://docker:2375
     DOCKER_DRIVER: overlay2
     DOCKER_TLS_CERTDIR: ""
     DOCKER_REGISTRY: 375366083547.dkr.ecr.ap-south-1.amazonaws.com
     APP_NAME: whaot_automation
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    # - sudo apt-get update
    # - sudo apt-get install apt
    - curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose


# Run the tests  
  script:

      - mkdir -p report/Student_SignUp
      - docker run -d -v /builds/gipo-new/whaot-automation/report/Student_SignUp:/home/gopal/git/whaot-automation/test-output --name=$APP_NAME $DOCKER_REGISTRY/$APP_NAME mvn -f pom.xml clean  test -PrunBDDTests "-Dcucumber.filter.tags=@Student_Signup" 
      - docker logs -f $APP_NAME 
      - docker rm -f $(docker ps -aq)   


      
# Store artifacts: Report

  artifacts: 
   paths: 
   - report/Student_SignUp/


   when: always
   expire_in: 1h

  only: 
     - element-locator-change 


# Define the job for testing the Docker image in the admin development environment
Teacher_Signup:
  stage: Teacher_SignUp
  allow_failure: true
 
  tags:
    - whaot_automation
  image: 
    name: docker:20.10.7
  services:
    - name: docker:dind
      alias: thedockerhost
  variables:
     MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
     DOCKER_HOST: tcp://docker:2375
     DOCKER_DRIVER: overlay2
     DOCKER_TLS_CERTDIR: ""
     DOCKER_REGISTRY: 375366083547.dkr.ecr.ap-south-1.amazonaws.com
     APP_NAME: whaot_automation
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
    - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    # - sudo apt-get update
    # - sudo apt-get install apt
    - curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose


# Run the tests  
  script:

      - mkdir -p report/Teacher_SignUp
      - docker run -d -v /builds/gipo-new/whaot-automation/report/Teacher_SignUp:/home/gopal/git/whaot-automation/test-output --name=$APP_NAME $DOCKER_REGISTRY/$APP_NAME mvn -f pom.xml clean  test -PrunBDDTests "-Dcucumber.filter.tags=@teacheruserlogin" 
      - docker logs -f $APP_NAME 
      - docker rm -f $(docker ps -aq)   


      
# Store artifacts: Report

  artifacts: 
   paths: 
   - report/Teacher_SignUp/


   when: always
   expire_in: 1h

  only: 
     - element-locator-change 
